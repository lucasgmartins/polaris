// Code generated by Prisma (prisma@1.20.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deploy: (where?: DeployWhereInput) => Promise<boolean>;
  repository: (where?: RepositoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deploy: (where: DeployWhereUniqueInput) => DeployPromise;
  deploys: (
    args?: {
      where?: DeployWhereInput;
      orderBy?: DeployOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Deploy>;
  deploysConnection: (
    args?: {
      where?: DeployWhereInput;
      orderBy?: DeployOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeployConnectionPromise;
  repository: (where: RepositoryWhereUniqueInput) => RepositoryPromise;
  repositories: (
    args?: {
      where?: RepositoryWhereInput;
      orderBy?: RepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Repository>;
  repositoriesConnection: (
    args?: {
      where?: RepositoryWhereInput;
      orderBy?: RepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RepositoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeploy: (data: DeployCreateInput) => DeployPromise;
  updateDeploy: (
    args: { data: DeployUpdateInput; where: DeployWhereUniqueInput }
  ) => DeployPromise;
  updateManyDeploys: (
    args: { data: DeployUpdateManyMutationInput; where?: DeployWhereInput }
  ) => BatchPayloadPromise;
  upsertDeploy: (
    args: {
      where: DeployWhereUniqueInput;
      create: DeployCreateInput;
      update: DeployUpdateInput;
    }
  ) => DeployPromise;
  deleteDeploy: (where: DeployWhereUniqueInput) => DeployPromise;
  deleteManyDeploys: (where?: DeployWhereInput) => BatchPayloadPromise;
  createRepository: (data: RepositoryCreateInput) => RepositoryPromise;
  updateRepository: (
    args: { data: RepositoryUpdateInput; where: RepositoryWhereUniqueInput }
  ) => RepositoryPromise;
  updateManyRepositories: (
    args: {
      data: RepositoryUpdateManyMutationInput;
      where?: RepositoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRepository: (
    args: {
      where: RepositoryWhereUniqueInput;
      create: RepositoryCreateInput;
      update: RepositoryUpdateInput;
    }
  ) => RepositoryPromise;
  deleteRepository: (where: RepositoryWhereUniqueInput) => RepositoryPromise;
  deleteManyRepositories: (where?: RepositoryWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deploy: (
    where?: DeploySubscriptionWhereInput
  ) => DeploySubscriptionPayloadSubscription;
  repository: (
    where?: RepositorySubscriptionWhereInput
  ) => RepositorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DeployOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RepositoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "github_id_ASC"
  | "github_id_DESC"
  | "github_name_ASC"
  | "github_name_DESC"
  | "github_url_ASC"
  | "github_url_DESC"
  | "healthcheck_threshold_seconds_ASC"
  | "healthcheck_threshold_seconds_DESC"
  | "healthcheck_url_ASC"
  | "healthcheck_url_DESC"
  | "retry_deploy_limit_ASC"
  | "retry_deploy_limit_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "username_ASC"
  | "username_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RepositoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type DeployWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DeployWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: DeployWhereInput[] | DeployWhereInput;
  OR?: DeployWhereInput[] | DeployWhereInput;
  NOT?: DeployWhereInput[] | DeployWhereInput;
}

export interface DeploySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeployWhereInput;
  AND?: DeploySubscriptionWhereInput[] | DeploySubscriptionWhereInput;
  OR?: DeploySubscriptionWhereInput[] | DeploySubscriptionWhereInput;
  NOT?: DeploySubscriptionWhereInput[] | DeploySubscriptionWhereInput;
}

export interface RepositoryCreateInput {
  github_id: Int;
  github_name: String;
  github_url: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  username?: String;
  photo?: String;
}

export interface DeployUpdateManyMutationInput {
  name?: String;
}

export interface RepositoryUpdateManyMutationInput {
  github_id?: Int;
  github_name?: String;
  github_url?: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface DeployUpdateInput {
  name?: String;
}

export interface RepositoryUpdateInput {
  github_id?: Int;
  github_name?: String;
  github_url?: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface RepositorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RepositoryWhereInput;
  AND?: RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput;
  OR?: RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput;
  NOT?: RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  photo?: String;
  photo_not?: String;
  photo_in?: String[] | String;
  photo_not_in?: String[] | String;
  photo_lt?: String;
  photo_lte?: String;
  photo_gt?: String;
  photo_gte?: String;
  photo_contains?: String;
  photo_not_contains?: String;
  photo_starts_with?: String;
  photo_not_starts_with?: String;
  photo_ends_with?: String;
  photo_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DeployCreateInput {
  name: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface RepositoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  github_id?: Int;
  github_id_not?: Int;
  github_id_in?: Int[] | Int;
  github_id_not_in?: Int[] | Int;
  github_id_lt?: Int;
  github_id_lte?: Int;
  github_id_gt?: Int;
  github_id_gte?: Int;
  github_name?: String;
  github_name_not?: String;
  github_name_in?: String[] | String;
  github_name_not_in?: String[] | String;
  github_name_lt?: String;
  github_name_lte?: String;
  github_name_gt?: String;
  github_name_gte?: String;
  github_name_contains?: String;
  github_name_not_contains?: String;
  github_name_starts_with?: String;
  github_name_not_starts_with?: String;
  github_name_ends_with?: String;
  github_name_not_ends_with?: String;
  github_url?: String;
  github_url_not?: String;
  github_url_in?: String[] | String;
  github_url_not_in?: String[] | String;
  github_url_lt?: String;
  github_url_lte?: String;
  github_url_gt?: String;
  github_url_gte?: String;
  github_url_contains?: String;
  github_url_not_contains?: String;
  github_url_starts_with?: String;
  github_url_not_starts_with?: String;
  github_url_ends_with?: String;
  github_url_not_ends_with?: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_threshold_seconds_not?: Int;
  healthcheck_threshold_seconds_in?: Int[] | Int;
  healthcheck_threshold_seconds_not_in?: Int[] | Int;
  healthcheck_threshold_seconds_lt?: Int;
  healthcheck_threshold_seconds_lte?: Int;
  healthcheck_threshold_seconds_gt?: Int;
  healthcheck_threshold_seconds_gte?: Int;
  healthcheck_url?: String;
  healthcheck_url_not?: String;
  healthcheck_url_in?: String[] | String;
  healthcheck_url_not_in?: String[] | String;
  healthcheck_url_lt?: String;
  healthcheck_url_lte?: String;
  healthcheck_url_gt?: String;
  healthcheck_url_gte?: String;
  healthcheck_url_contains?: String;
  healthcheck_url_not_contains?: String;
  healthcheck_url_starts_with?: String;
  healthcheck_url_not_starts_with?: String;
  healthcheck_url_ends_with?: String;
  healthcheck_url_not_ends_with?: String;
  retry_deploy_limit?: Int;
  retry_deploy_limit_not?: Int;
  retry_deploy_limit_in?: Int[] | Int;
  retry_deploy_limit_not_in?: Int[] | Int;
  retry_deploy_limit_lt?: Int;
  retry_deploy_limit_lte?: Int;
  retry_deploy_limit_gt?: Int;
  retry_deploy_limit_gte?: Int;
  AND?: RepositoryWhereInput[] | RepositoryWhereInput;
  OR?: RepositoryWhereInput[] | RepositoryWhereInput;
  NOT?: RepositoryWhereInput[] | RepositoryWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateInput {
  email: String;
  name: String;
  username: String;
  photo?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  username?: String;
  photo?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeploy {
  count: Int;
}

export interface AggregateDeployPromise
  extends Promise<AggregateDeploy>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeploySubscription
  extends Promise<AsyncIterator<AggregateDeploy>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RepositorySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RepositorySubscriptionPayloadPromise
  extends Promise<RepositorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepositoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepositoryPreviousValuesPromise>() => T;
}

export interface RepositorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepositorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepositorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepositoryPreviousValuesSubscription>() => T;
}

export interface DeployEdge {
  cursor: String;
}

export interface DeployEdgePromise extends Promise<DeployEdge>, Fragmentable {
  node: <T = DeployPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeployEdgeSubscription
  extends Promise<AsyncIterator<DeployEdge>>,
    Fragmentable {
  node: <T = DeploySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  username: String;
  photo?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  username: String;
  photo?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RepositoryEdge {
  cursor: String;
}

export interface RepositoryEdgePromise
  extends Promise<RepositoryEdge>,
    Fragmentable {
  node: <T = RepositoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepositoryEdgeSubscription
  extends Promise<AsyncIterator<RepositoryEdge>>,
    Fragmentable {
  node: <T = RepositorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DeployConnection {}

export interface DeployConnectionPromise
  extends Promise<DeployConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeployEdge>>() => T;
  aggregate: <T = AggregateDeployPromise>() => T;
}

export interface DeployConnectionSubscription
  extends Promise<AsyncIterator<DeployConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeployEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeploySubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Repository {
  id: ID_Output;
  github_id: Int;
  github_name: String;
  github_url: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface RepositoryPromise extends Promise<Repository>, Fragmentable {
  id: () => Promise<ID_Output>;
  github_id: () => Promise<Int>;
  github_name: () => Promise<String>;
  github_url: () => Promise<String>;
  healthcheck_threshold_seconds: () => Promise<Int>;
  healthcheck_url: () => Promise<String>;
  retry_deploy_limit: () => Promise<Int>;
}

export interface RepositorySubscription
  extends Promise<AsyncIterator<Repository>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  github_id: () => Promise<AsyncIterator<Int>>;
  github_name: () => Promise<AsyncIterator<String>>;
  github_url: () => Promise<AsyncIterator<String>>;
  healthcheck_threshold_seconds: () => Promise<AsyncIterator<Int>>;
  healthcheck_url: () => Promise<AsyncIterator<String>>;
  retry_deploy_limit: () => Promise<AsyncIterator<Int>>;
}

export interface RepositoryPreviousValues {
  id: ID_Output;
  github_id: Int;
  github_name: String;
  github_url: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface RepositoryPreviousValuesPromise
  extends Promise<RepositoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  github_id: () => Promise<Int>;
  github_name: () => Promise<String>;
  github_url: () => Promise<String>;
  healthcheck_threshold_seconds: () => Promise<Int>;
  healthcheck_url: () => Promise<String>;
  retry_deploy_limit: () => Promise<Int>;
}

export interface RepositoryPreviousValuesSubscription
  extends Promise<AsyncIterator<RepositoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  github_id: () => Promise<AsyncIterator<Int>>;
  github_name: () => Promise<AsyncIterator<String>>;
  github_url: () => Promise<AsyncIterator<String>>;
  healthcheck_threshold_seconds: () => Promise<AsyncIterator<Int>>;
  healthcheck_url: () => Promise<AsyncIterator<String>>;
  retry_deploy_limit: () => Promise<AsyncIterator<Int>>;
}

export interface DeployPreviousValues {
  id: ID_Output;
  name: String;
}

export interface DeployPreviousValuesPromise
  extends Promise<DeployPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DeployPreviousValuesSubscription
  extends Promise<AsyncIterator<DeployPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DeploySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DeploySubscriptionPayloadPromise
  extends Promise<DeploySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeployPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeployPreviousValuesPromise>() => T;
}

export interface DeploySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeploySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeploySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeployPreviousValuesSubscription>() => T;
}

export interface Deploy {
  id: ID_Output;
  name: String;
}

export interface DeployPromise extends Promise<Deploy>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DeploySubscription
  extends Promise<AsyncIterator<Deploy>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface RepositoryConnection {}

export interface RepositoryConnectionPromise
  extends Promise<RepositoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepositoryEdge>>() => T;
  aggregate: <T = AggregateRepositoryPromise>() => T;
}

export interface RepositoryConnectionSubscription
  extends Promise<AsyncIterator<RepositoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepositoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepositorySubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateRepository {
  count: Int;
}

export interface AggregateRepositoryPromise
  extends Promise<AggregateRepository>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepositorySubscription
  extends Promise<AsyncIterator<AggregateRepository>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Deploy",
    embedded: false
  },
  {
    name: "Repository",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
