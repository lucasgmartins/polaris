// Code generated by Prisma (prisma@1.25.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  feature: (where?: FeatureWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  feature: (where: FeatureWhereUniqueInput) => FeaturePromise;
  features: (args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Feature>;
  featuresConnection: (args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeatureConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectPromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFeature: (data: FeatureCreateInput) => FeaturePromise;
  updateFeature: (args: {
    data: FeatureUpdateInput;
    where: FeatureWhereUniqueInput;
  }) => FeaturePromise;
  updateManyFeatures: (args: {
    data: FeatureUpdateManyMutationInput;
    where?: FeatureWhereInput;
  }) => BatchPayloadPromise;
  upsertFeature: (args: {
    where: FeatureWhereUniqueInput;
    create: FeatureCreateInput;
    update: FeatureUpdateInput;
  }) => FeaturePromise;
  deleteFeature: (where: FeatureWhereUniqueInput) => FeaturePromise;
  deleteManyFeatures: (where?: FeatureWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  feature: (
    where?: FeatureSubscriptionWhereInput
  ) => FeatureSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FeatureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "repository_id_ASC"
  | "repository_id_DESC"
  | "repository_name_ASC"
  | "repository_name_DESC"
  | "responsible_login_ASC"
  | "responsible_login_DESC"
  | "responsible_avatar_ASC"
  | "responsible_avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "repository_id_ASC"
  | "repository_id_DESC"
  | "repository_url_ASC"
  | "repository_url_DESC"
  | "healthcheck_threshold_seconds_ASC"
  | "healthcheck_threshold_seconds_DESC"
  | "healthcheck_url_ASC"
  | "healthcheck_url_DESC"
  | "retry_deploy_limit_ASC"
  | "retry_deploy_limit_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "username_ASC"
  | "username_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type FeatureWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface FeatureWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  repository_id?: Int;
  repository_id_not?: Int;
  repository_id_in?: Int[] | Int;
  repository_id_not_in?: Int[] | Int;
  repository_id_lt?: Int;
  repository_id_lte?: Int;
  repository_id_gt?: Int;
  repository_id_gte?: Int;
  repository_name?: String;
  repository_name_not?: String;
  repository_name_in?: String[] | String;
  repository_name_not_in?: String[] | String;
  repository_name_lt?: String;
  repository_name_lte?: String;
  repository_name_gt?: String;
  repository_name_gte?: String;
  repository_name_contains?: String;
  repository_name_not_contains?: String;
  repository_name_starts_with?: String;
  repository_name_not_starts_with?: String;
  repository_name_ends_with?: String;
  repository_name_not_ends_with?: String;
  responsible_login?: String;
  responsible_login_not?: String;
  responsible_login_in?: String[] | String;
  responsible_login_not_in?: String[] | String;
  responsible_login_lt?: String;
  responsible_login_lte?: String;
  responsible_login_gt?: String;
  responsible_login_gte?: String;
  responsible_login_contains?: String;
  responsible_login_not_contains?: String;
  responsible_login_starts_with?: String;
  responsible_login_not_starts_with?: String;
  responsible_login_ends_with?: String;
  responsible_login_not_ends_with?: String;
  responsible_avatar?: String;
  responsible_avatar_not?: String;
  responsible_avatar_in?: String[] | String;
  responsible_avatar_not_in?: String[] | String;
  responsible_avatar_lt?: String;
  responsible_avatar_lte?: String;
  responsible_avatar_gt?: String;
  responsible_avatar_gte?: String;
  responsible_avatar_contains?: String;
  responsible_avatar_not_contains?: String;
  responsible_avatar_starts_with?: String;
  responsible_avatar_not_starts_with?: String;
  responsible_avatar_ends_with?: String;
  responsible_avatar_not_ends_with?: String;
  AND?: FeatureWhereInput[] | FeatureWhereInput;
  OR?: FeatureWhereInput[] | FeatureWhereInput;
  NOT?: FeatureWhereInput[] | FeatureWhereInput;
}

export interface FeatureSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FeatureWhereInput;
  AND?: FeatureSubscriptionWhereInput[] | FeatureSubscriptionWhereInput;
  OR?: FeatureSubscriptionWhereInput[] | FeatureSubscriptionWhereInput;
  NOT?: FeatureSubscriptionWhereInput[] | FeatureSubscriptionWhereInput;
}

export interface ProjectCreateInput {
  name: String;
  repository_id: Int;
  repository_url: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  username?: String;
  photo?: String;
}

export interface FeatureUpdateManyMutationInput {
  name?: String;
  repository_id?: Int;
  repository_name?: String;
  responsible_login?: String;
  responsible_avatar?: String;
}

export interface ProjectUpdateManyMutationInput {
  name?: String;
  repository_id?: Int;
  repository_url?: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface FeatureUpdateInput {
  name?: String;
  repository_id?: Int;
  repository_name?: String;
  responsible_login?: String;
  responsible_avatar?: String;
}

export interface ProjectUpdateInput {
  name?: String;
  repository_id?: Int;
  repository_url?: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  photo?: String;
  photo_not?: String;
  photo_in?: String[] | String;
  photo_not_in?: String[] | String;
  photo_lt?: String;
  photo_lte?: String;
  photo_gt?: String;
  photo_gte?: String;
  photo_contains?: String;
  photo_not_contains?: String;
  photo_starts_with?: String;
  photo_not_starts_with?: String;
  photo_ends_with?: String;
  photo_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface FeatureCreateInput {
  name: String;
  repository_id: Int;
  repository_name: String;
  responsible_login: String;
  responsible_avatar: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  repository_id?: Int;
  repository_id_not?: Int;
  repository_id_in?: Int[] | Int;
  repository_id_not_in?: Int[] | Int;
  repository_id_lt?: Int;
  repository_id_lte?: Int;
  repository_id_gt?: Int;
  repository_id_gte?: Int;
  repository_url?: String;
  repository_url_not?: String;
  repository_url_in?: String[] | String;
  repository_url_not_in?: String[] | String;
  repository_url_lt?: String;
  repository_url_lte?: String;
  repository_url_gt?: String;
  repository_url_gte?: String;
  repository_url_contains?: String;
  repository_url_not_contains?: String;
  repository_url_starts_with?: String;
  repository_url_not_starts_with?: String;
  repository_url_ends_with?: String;
  repository_url_not_ends_with?: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_threshold_seconds_not?: Int;
  healthcheck_threshold_seconds_in?: Int[] | Int;
  healthcheck_threshold_seconds_not_in?: Int[] | Int;
  healthcheck_threshold_seconds_lt?: Int;
  healthcheck_threshold_seconds_lte?: Int;
  healthcheck_threshold_seconds_gt?: Int;
  healthcheck_threshold_seconds_gte?: Int;
  healthcheck_url?: String;
  healthcheck_url_not?: String;
  healthcheck_url_in?: String[] | String;
  healthcheck_url_not_in?: String[] | String;
  healthcheck_url_lt?: String;
  healthcheck_url_lte?: String;
  healthcheck_url_gt?: String;
  healthcheck_url_gte?: String;
  healthcheck_url_contains?: String;
  healthcheck_url_not_contains?: String;
  healthcheck_url_starts_with?: String;
  healthcheck_url_not_starts_with?: String;
  healthcheck_url_ends_with?: String;
  healthcheck_url_not_ends_with?: String;
  retry_deploy_limit?: Int;
  retry_deploy_limit_not?: Int;
  retry_deploy_limit_in?: Int[] | Int;
  retry_deploy_limit_not_in?: Int[] | Int;
  retry_deploy_limit_lt?: Int;
  retry_deploy_limit_lte?: Int;
  retry_deploy_limit_gt?: Int;
  retry_deploy_limit_gte?: Int;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateInput {
  email: String;
  name: String;
  username: String;
  photo?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  username?: String;
  photo?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeature {
  count: Int;
}

export interface AggregateFeaturePromise
  extends Promise<AggregateFeature>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeatureSubscription
  extends Promise<AsyncIterator<AggregateFeature>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface FeatureEdge {
  node: Feature;
  cursor: String;
}

export interface FeatureEdgePromise extends Promise<FeatureEdge>, Fragmentable {
  node: <T = FeaturePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeatureEdgeSubscription
  extends Promise<AsyncIterator<FeatureEdge>>,
    Fragmentable {
  node: <T = FeatureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  username: String;
  photo?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  username: String;
  photo?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FeatureConnection {
  pageInfo: PageInfo;
  edges: FeatureEdge[];
}

export interface FeatureConnectionPromise
  extends Promise<FeatureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeatureEdge>>() => T;
  aggregate: <T = AggregateFeaturePromise>() => T;
}

export interface FeatureConnectionSubscription
  extends Promise<AsyncIterator<FeatureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeatureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeatureSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Project {
  id: ID_Output;
  name: String;
  repository_id: Int;
  repository_url: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  repository_id: () => Promise<Int>;
  repository_url: () => Promise<String>;
  healthcheck_threshold_seconds: () => Promise<Int>;
  healthcheck_url: () => Promise<String>;
  retry_deploy_limit: () => Promise<Int>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  repository_id: () => Promise<AsyncIterator<Int>>;
  repository_url: () => Promise<AsyncIterator<String>>;
  healthcheck_threshold_seconds: () => Promise<AsyncIterator<Int>>;
  healthcheck_url: () => Promise<AsyncIterator<String>>;
  retry_deploy_limit: () => Promise<AsyncIterator<Int>>;
}

export interface Feature {
  id: ID_Output;
  name: String;
  repository_id: Int;
  repository_name: String;
  responsible_login: String;
  responsible_avatar: String;
}

export interface FeaturePromise extends Promise<Feature>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  repository_id: () => Promise<Int>;
  repository_name: () => Promise<String>;
  responsible_login: () => Promise<String>;
  responsible_avatar: () => Promise<String>;
}

export interface FeatureSubscription
  extends Promise<AsyncIterator<Feature>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  repository_id: () => Promise<AsyncIterator<Int>>;
  repository_name: () => Promise<AsyncIterator<String>>;
  responsible_login: () => Promise<AsyncIterator<String>>;
  responsible_avatar: () => Promise<AsyncIterator<String>>;
}

export interface FeaturePreviousValues {
  id: ID_Output;
  name: String;
  repository_id: Int;
  repository_name: String;
  responsible_login: String;
  responsible_avatar: String;
}

export interface FeaturePreviousValuesPromise
  extends Promise<FeaturePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  repository_id: () => Promise<Int>;
  repository_name: () => Promise<String>;
  responsible_login: () => Promise<String>;
  responsible_avatar: () => Promise<String>;
}

export interface FeaturePreviousValuesSubscription
  extends Promise<AsyncIterator<FeaturePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  repository_id: () => Promise<AsyncIterator<Int>>;
  repository_name: () => Promise<AsyncIterator<String>>;
  responsible_login: () => Promise<AsyncIterator<String>>;
  responsible_avatar: () => Promise<AsyncIterator<String>>;
}

export interface FeatureSubscriptionPayload {
  mutation: MutationType;
  node: Feature;
  updatedFields: String[];
  previousValues: FeaturePreviousValues;
}

export interface FeatureSubscriptionPayloadPromise
  extends Promise<FeatureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeaturePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeaturePreviousValuesPromise>() => T;
}

export interface FeatureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeatureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeatureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeaturePreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  name: String;
  repository_id: Int;
  repository_url: String;
  healthcheck_threshold_seconds?: Int;
  healthcheck_url?: String;
  retry_deploy_limit?: Int;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  repository_id: () => Promise<Int>;
  repository_url: () => Promise<String>;
  healthcheck_threshold_seconds: () => Promise<Int>;
  healthcheck_url: () => Promise<String>;
  retry_deploy_limit: () => Promise<Int>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  repository_id: () => Promise<AsyncIterator<Int>>;
  repository_url: () => Promise<AsyncIterator<String>>;
  healthcheck_threshold_seconds: () => Promise<AsyncIterator<Int>>;
  healthcheck_url: () => Promise<AsyncIterator<String>>;
  retry_deploy_limit: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Feature",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
